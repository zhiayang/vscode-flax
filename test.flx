// test.flx
// Copyright (c) 2017, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.


fn overloadErrorTest()
{
	fn printThings(mul: f64, flts: [f64: ...])
	{
		printf("floats: ");
		for i in flts { printf("%.1f ", mul * i) }

		printf("\n")
	}

	fn printThings(mul: str, flts: [f64: ...])
	{
		printf("floats: ");
		for i in flts { printf("%s: %.1f ", mul.ptr, i) }

		printf("\n")
	}

	fn printThings()
	{
		printf("print things 3\n")
	}

	do {
		printThings(30, ...[as f64: 1, 2, 3, 4, 5 ])
		printThings(0.813, 1, 2, 4.41, 39, 491.3, 381.7)
	}
}







// linkedlist.flx
// Copyright (c) 2017, zhiayang@gmail.com
// Licensed under the Apache License Version 2.0.

export test_linkedlist
import "libc" as foo

class LinkedList<T>
{
	struct Node
	{
		var prev: &Node
		var next: &Node

		var data: T
	}

	var head: &Node
	var tail: &Node

	var count: int

	init(data: T)
	{
		printf("called init\n")
	}

	mut fn insert(thing: T)
	{
		var nn = alloc mut Node (data: thing, prev: null, next: null)

		if head == null { head = nn; tail = nn }
		else
		{
			var ot = tail as mut
			tail = nn

			nn.prev = ot
			ot.next = nn
		}

		count += 1
	}

	static fn hello() { printf("hi\n"); }
}


public fn doLinkedListTest()
{
	do {
		var list = LinkedList(data: 41)
		LinkedList!<int>::hello()

		var list2 = LinkedList(data: "foo")
		list2.insert("hello")
		list2.insert("world")

		list.insert(10)
		list.insert(20)
		list.insert(30)
		list.insert(40)

		do {
			var head = list.head
			while(head)
			{
				printf("%d\n", head.data)
				head = head.next
			}
		}

		do {
			var head = list2.head
			while(head)
			{
				printf("%s\n", head.data)
				head = head.next
			}
		}
	}
}